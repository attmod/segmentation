/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <SegmentationModuleInterface.h>

#include <yarp/os/idl/WireTypes.h>

namespace yarp {
namespace sig {

class SegmentationModuleInterface_set_sigma_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_set_sigma_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModuleInterface_set_sigma_helper::SegmentationModuleInterface_set_sigma_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModuleInterface_set_sigma_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_sigma", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModuleInterface_set_k_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_set_k_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModuleInterface_set_k_helper::SegmentationModuleInterface_set_k_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModuleInterface_set_k_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_k", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModuleInterface_set_minRegion_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_set_minRegion_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModuleInterface_set_minRegion_helper::SegmentationModuleInterface_set_minRegion_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModuleInterface_set_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_minRegion", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModuleInterface_get_sigma_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_get_sigma_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModuleInterface_get_sigma_helper::s_return_helper = {};

SegmentationModuleInterface_get_sigma_helper::SegmentationModuleInterface_get_sigma_helper()
{
    s_return_helper = {};
}

bool SegmentationModuleInterface_get_sigma_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_sigma", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModuleInterface_get_k_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_get_k_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModuleInterface_get_k_helper::s_return_helper = {};

SegmentationModuleInterface_get_k_helper::SegmentationModuleInterface_get_k_helper()
{
    s_return_helper = {};
}

bool SegmentationModuleInterface_get_k_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_k", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModuleInterface_get_minRegion_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_get_minRegion_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModuleInterface_get_minRegion_helper::s_return_helper = {};

SegmentationModuleInterface_get_minRegion_helper::SegmentationModuleInterface_get_minRegion_helper()
{
    s_return_helper = {};
}

bool SegmentationModuleInterface_get_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_minRegion", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModuleInterface_get_num_components_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_get_num_components_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::int32_t s_return_helper;
};

thread_local std::int32_t SegmentationModuleInterface_get_num_components_helper::s_return_helper = {};

SegmentationModuleInterface_get_num_components_helper::SegmentationModuleInterface_get_num_components_helper()
{
    s_return_helper = {};
}

bool SegmentationModuleInterface_get_num_components_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("get_num_components", 1, 3)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readI32(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModuleInterface_get_component_around_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModuleInterface_get_component_around_helper(const Pixel& objCenter);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    Pixel m_objCenter;

    thread_local static std::vector<Pixel> s_return_helper;
};

thread_local std::vector<Pixel> SegmentationModuleInterface_get_component_around_helper::s_return_helper = {};

SegmentationModuleInterface_get_component_around_helper::SegmentationModuleInterface_get_component_around_helper(const Pixel& objCenter) :
        m_objCenter{objCenter}
{
}

bool SegmentationModuleInterface_get_component_around_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("get_component_around", 1, 3)) {
        return false;
    }
    if (!writer.write(m_objCenter)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    s_return_helper.clear();
    uint32_t _size0;
    yarp::os::idl::WireState _etype3;
    reader.readListBegin(_etype3, _size0);
    s_return_helper.resize(_size0);
    for (size_t _i4 = 0; _i4 < _size0; ++_i4) {
        if (!reader.readNested(s_return_helper[_i4])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// Constructor
SegmentationModuleInterface::SegmentationModuleInterface()
{
    yarp().setOwner(*this);
}

void SegmentationModuleInterface::set_sigma(const double newValue)
{
    SegmentationModuleInterface_set_sigma_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModuleInterface::set_sigma(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModuleInterface::set_k(const double newValue)
{
    SegmentationModuleInterface_set_k_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModuleInterface::set_k(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModuleInterface::set_minRegion(const double newValue)
{
    SegmentationModuleInterface_set_minRegion_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModuleInterface::set_minRegion(const double newValue)");
    }
    yarp().write(helper, helper);
}

double SegmentationModuleInterface::get_sigma()
{
    SegmentationModuleInterface_get_sigma_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModuleInterface::get_sigma()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModuleInterface_get_sigma_helper::s_return_helper : double{};
}

double SegmentationModuleInterface::get_k()
{
    SegmentationModuleInterface_get_k_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModuleInterface::get_k()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModuleInterface_get_k_helper::s_return_helper : double{};
}

double SegmentationModuleInterface::get_minRegion()
{
    SegmentationModuleInterface_get_minRegion_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModuleInterface::get_minRegion()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModuleInterface_get_minRegion_helper::s_return_helper : double{};
}

std::int32_t SegmentationModuleInterface::get_num_components()
{
    SegmentationModuleInterface_get_num_components_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::int32_t SegmentationModuleInterface::get_num_components()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModuleInterface_get_num_components_helper::s_return_helper : std::int32_t{};
}

std::vector<Pixel> SegmentationModuleInterface::get_component_around(const Pixel& objCenter)
{
    SegmentationModuleInterface_get_component_around_helper helper{objCenter};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::vector<Pixel> SegmentationModuleInterface::get_component_around(const Pixel& objCenter)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModuleInterface_get_component_around_helper::s_return_helper : std::vector<Pixel>{};
}

// help method
std::vector<std::string> SegmentationModuleInterface::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("set_sigma");
        helpString.emplace_back("set_k");
        helpString.emplace_back("set_minRegion");
        helpString.emplace_back("get_sigma");
        helpString.emplace_back("get_k");
        helpString.emplace_back("get_minRegion");
        helpString.emplace_back("get_num_components");
        helpString.emplace_back("get_component_around");
        helpString.emplace_back("help");
    } else {
        if (functionName == "set_sigma") {
            helpString.emplace_back("void set_sigma(const double newValue) ");
            helpString.emplace_back("Set sigma (smoothing) parameter for the algorithm ");
            helpString.emplace_back("@param newValue new value for sigma parameter ");
        }
        if (functionName == "set_k") {
            helpString.emplace_back("void set_k(const double newValue) ");
            helpString.emplace_back("Set k (scale factor for boundary-detection threshold function) parameter for the algorithm ");
            helpString.emplace_back("@param newValue new value for k parameter ");
        }
        if (functionName == "set_minRegion") {
            helpString.emplace_back("void set_minRegion(const double newValue) ");
            helpString.emplace_back("Set minRegion parameter for the algorithm, i.e., the minimum size of any segmented component ");
            helpString.emplace_back("@param newValue new value for minRegion parameter ");
        }
        if (functionName == "get_sigma") {
            helpString.emplace_back("double get_sigma() ");
            helpString.emplace_back("Get sigma (smoothing) parameter for the algorithm ");
            helpString.emplace_back("@return current value for sigma parameter ");
        }
        if (functionName == "get_k") {
            helpString.emplace_back("double get_k() ");
            helpString.emplace_back("Get k (scale factor for boundary-detection threshold function) parameter for the algorithm ");
            helpString.emplace_back("@return current value for k parameter ");
        }
        if (functionName == "get_minRegion") {
            helpString.emplace_back("double get_minRegion() ");
            helpString.emplace_back("Get minRegion parameter for the algorithm, i.e., the minimum size of any segmented component ");
            helpString.emplace_back("@return current value for minRegion parameter ");
        }
        if (functionName == "get_num_components") {
            helpString.emplace_back("std::int32_t get_num_components() ");
            helpString.emplace_back("Get the number of segmented components that have been detected in the last provided image ");
            helpString.emplace_back("@return number of segmented components ");
        }
        if (functionName == "get_component_around") {
            helpString.emplace_back("std::vector<Pixel> get_component_around(const Pixel& objCenter) ");
            helpString.emplace_back("Get the list of pixels corresponding to the component to which a given pixel belongs ");
            helpString.emplace_back("@param objCenter a pixel belonging to the region of interest ");
            helpString.emplace_back("@return list of pixels belonging to the same component as the input pixels ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool SegmentationModuleInterface::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "set_sigma") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_sigma(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_k") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_k(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_minRegion") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_minRegion(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_sigma") {
            SegmentationModuleInterface_get_sigma_helper::s_return_helper = get_sigma();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModuleInterface_get_sigma_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_k") {
            SegmentationModuleInterface_get_k_helper::s_return_helper = get_k();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModuleInterface_get_k_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_minRegion") {
            SegmentationModuleInterface_get_minRegion_helper::s_return_helper = get_minRegion();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModuleInterface_get_minRegion_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_num_components") {
            SegmentationModuleInterface_get_num_components_helper::s_return_helper = get_num_components();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(SegmentationModuleInterface_get_num_components_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_component_around") {
            Pixel objCenter;
            if (!reader.read(objCenter)) {
                reader.fail();
                return false;
            }
            SegmentationModuleInterface_get_component_around_helper::s_return_helper = get_component_around(objCenter);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_LIST, static_cast<uint32_t>(SegmentationModuleInterface_get_component_around_helper::s_return_helper.size()))) {
                    return false;
                }
                for (const auto& _item5 : SegmentationModuleInterface_get_component_around_helper::s_return_helper) {
                    if (!writer.writeNested(_item5)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace yarp
} // namespace sig
