/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/sig/SegmentationModuleInterface.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

namespace yarp::sig {

// set_sigma helper class declaration
class SegmentationModuleInterface_set_sigma_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_set_sigma_helper() = default;
    explicit SegmentationModuleInterface_set_sigma_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModuleInterface* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_sigma"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModuleInterface::set_sigma(const double newValue)"};
    static constexpr const char* s_help{
        "Set sigma (smoothing) parameter for the algorithm\n"
        "@param newValue new value for sigma parameter"
    };
};

// set_k helper class declaration
class SegmentationModuleInterface_set_k_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_set_k_helper() = default;
    explicit SegmentationModuleInterface_set_k_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModuleInterface* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_k"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModuleInterface::set_k(const double newValue)"};
    static constexpr const char* s_help{
        "Set k (scale factor for boundary-detection threshold function) parameter for the algorithm\n"
        "@param newValue new value for k parameter"
    };
};

// set_minRegion helper class declaration
class SegmentationModuleInterface_set_minRegion_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_set_minRegion_helper() = default;
    explicit SegmentationModuleInterface_set_minRegion_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModuleInterface* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_minRegion"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModuleInterface::set_minRegion(const double newValue)"};
    static constexpr const char* s_help{
        "Set minRegion parameter for the algorithm, i.e., the minimum size of any segmented component\n"
        "@param newValue new value for minRegion parameter"
    };
};

// get_sigma helper class declaration
class SegmentationModuleInterface_get_sigma_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_get_sigma_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModuleInterface* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_sigma"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModuleInterface::get_sigma()"};
    static constexpr const char* s_help{
        "Get sigma (smoothing) parameter for the algorithm\n"
        "@return current value for sigma parameter"
    };
};

// get_k helper class declaration
class SegmentationModuleInterface_get_k_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_get_k_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModuleInterface* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_k"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModuleInterface::get_k()"};
    static constexpr const char* s_help{
        "Get k (scale factor for boundary-detection threshold function) parameter for the algorithm\n"
        "@return current value for k parameter"
    };
};

// get_minRegion helper class declaration
class SegmentationModuleInterface_get_minRegion_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_get_minRegion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModuleInterface* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_minRegion"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModuleInterface::get_minRegion()"};
    static constexpr const char* s_help{
        "Get minRegion parameter for the algorithm, i.e., the minimum size of any segmented component\n"
        "@return current value for minRegion parameter"
    };
};

// get_num_components helper class declaration
class SegmentationModuleInterface_get_num_components_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_get_num_components_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::int32_t return_helper{0};
    };

    using funcptr_t = std::int32_t (*)();
    void call(SegmentationModuleInterface* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_num_components"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::int32_t SegmentationModuleInterface::get_num_components()"};
    static constexpr const char* s_help{
        "Get the number of segmented components that have been detected in the last provided image\n"
        "@return number of segmented components"
    };
};

// get_component_around helper class declaration
class SegmentationModuleInterface_get_component_around_helper :
        public yarp::os::Portable
{
public:
    SegmentationModuleInterface_get_component_around_helper() = default;
    explicit SegmentationModuleInterface_get_component_around_helper(const Pixel& objCenter);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const Pixel& objCenter);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        Pixel objCenter{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::vector<Pixel> return_helper{};
    };

    using funcptr_t = std::vector<Pixel> (*)(const Pixel&);
    void call(SegmentationModuleInterface* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_component_around"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::vector<Pixel> SegmentationModuleInterface::get_component_around(const Pixel& objCenter)"};
    static constexpr const char* s_help{
        "Get the list of pixels corresponding to the component to which a given pixel belongs\n"
        "@param objCenter a pixel belonging to the region of interest\n"
        "@return list of pixels belonging to the same component as the input pixels"
    };
};

// set_sigma helper class implementation
SegmentationModuleInterface_set_sigma_helper::SegmentationModuleInterface_set_sigma_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModuleInterface_set_sigma_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_set_sigma_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModuleInterface_set_sigma_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModuleInterface_set_sigma_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_set_sigma_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_set_sigma_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_set_sigma_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_set_sigma_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_set_sigma_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModuleInterface_set_sigma_helper::call(SegmentationModuleInterface* ptr) const
{
    ptr->set_sigma(cmd.newValue);
}

// set_k helper class implementation
SegmentationModuleInterface_set_k_helper::SegmentationModuleInterface_set_k_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModuleInterface_set_k_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_set_k_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModuleInterface_set_k_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModuleInterface_set_k_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_set_k_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_set_k_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_set_k_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_set_k_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_set_k_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModuleInterface_set_k_helper::call(SegmentationModuleInterface* ptr) const
{
    ptr->set_k(cmd.newValue);
}

// set_minRegion helper class implementation
SegmentationModuleInterface_set_minRegion_helper::SegmentationModuleInterface_set_minRegion_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModuleInterface_set_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_set_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModuleInterface_set_minRegion_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_set_minRegion_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_set_minRegion_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_set_minRegion_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModuleInterface_set_minRegion_helper::call(SegmentationModuleInterface* ptr) const
{
    ptr->set_minRegion(cmd.newValue);
}

// get_sigma helper class implementation
bool SegmentationModuleInterface_get_sigma_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_get_sigma_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModuleInterface_get_sigma_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_get_sigma_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_get_sigma_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_get_sigma_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_get_sigma_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_get_sigma_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModuleInterface_get_sigma_helper::call(SegmentationModuleInterface* ptr)
{
    reply.return_helper = ptr->get_sigma();
}

// get_k helper class implementation
bool SegmentationModuleInterface_get_k_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_get_k_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModuleInterface_get_k_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_get_k_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_get_k_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_get_k_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_get_k_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_get_k_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModuleInterface_get_k_helper::call(SegmentationModuleInterface* ptr)
{
    reply.return_helper = ptr->get_k();
}

// get_minRegion helper class implementation
bool SegmentationModuleInterface_get_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_get_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_get_minRegion_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_get_minRegion_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_get_minRegion_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModuleInterface_get_minRegion_helper::call(SegmentationModuleInterface* ptr)
{
    reply.return_helper = ptr->get_minRegion();
}

// get_num_components helper class implementation
bool SegmentationModuleInterface_get_num_components_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_get_num_components_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModuleInterface_get_num_components_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_get_num_components_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_get_num_components_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_get_num_components_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_get_num_components_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeI32(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_get_num_components_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModuleInterface_get_num_components_helper::call(SegmentationModuleInterface* ptr)
{
    reply.return_helper = ptr->get_num_components();
}

// get_component_around helper class implementation
SegmentationModuleInterface_get_component_around_helper::SegmentationModuleInterface_get_component_around_helper(const Pixel& objCenter) :
        cmd{objCenter}
{
}

bool SegmentationModuleInterface_get_component_around_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModuleInterface_get_component_around_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModuleInterface_get_component_around_helper::Command::Command(const Pixel& objCenter) :
        objCenter{objCenter}
{
}

bool SegmentationModuleInterface_get_component_around_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModuleInterface_get_component_around_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModuleInterface_get_component_around_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(objCenter)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(objCenter)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModuleInterface_get_component_around_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModuleInterface_get_component_around_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeListBegin(BOTTLE_TAG_LIST, return_helper.size())) {
            return false;
        }
        for (const auto& _item : return_helper) {
            if (!writer.writeNested(_item)) {
                return false;
            }
        }
        if (!writer.writeListEnd()) {
            return false;
        }
    }
    return true;
}

bool SegmentationModuleInterface_get_component_around_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_LIST) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    return_helper.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(return_helper[_i])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

void SegmentationModuleInterface_get_component_around_helper::call(SegmentationModuleInterface* ptr)
{
    reply.return_helper = ptr->get_component_around(cmd.objCenter);
}

// Constructor
SegmentationModuleInterface::SegmentationModuleInterface()
{
    yarp().setOwner(*this);
}

void SegmentationModuleInterface::set_sigma(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_set_sigma_helper::s_prototype);
    }
    SegmentationModuleInterface_set_sigma_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModuleInterface::set_k(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_set_k_helper::s_prototype);
    }
    SegmentationModuleInterface_set_k_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModuleInterface::set_minRegion(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_set_minRegion_helper::s_prototype);
    }
    SegmentationModuleInterface_set_minRegion_helper helper{newValue};
    yarp().write(helper, helper);
}

double SegmentationModuleInterface::get_sigma()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_get_sigma_helper::s_prototype);
    }
    SegmentationModuleInterface_get_sigma_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModuleInterface::get_k()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_get_k_helper::s_prototype);
    }
    SegmentationModuleInterface_get_k_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModuleInterface::get_minRegion()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_get_minRegion_helper::s_prototype);
    }
    SegmentationModuleInterface_get_minRegion_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

std::int32_t SegmentationModuleInterface::get_num_components()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_get_num_components_helper::s_prototype);
    }
    SegmentationModuleInterface_get_num_components_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::int32_t{};
}

std::vector<Pixel> SegmentationModuleInterface::get_component_around(const Pixel& objCenter)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModuleInterface_get_component_around_helper::s_prototype);
    }
    SegmentationModuleInterface_get_component_around_helper helper{objCenter};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::vector<Pixel>{};
}

// help method
std::vector<std::string> SegmentationModuleInterface::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(SegmentationModuleInterface_set_sigma_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_set_k_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_set_minRegion_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_get_sigma_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_get_k_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_get_minRegion_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_get_num_components_helper::s_tag);
        helpString.emplace_back(SegmentationModuleInterface_get_component_around_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == SegmentationModuleInterface_set_sigma_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_set_sigma_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_set_sigma_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_set_k_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_set_k_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_set_k_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_set_minRegion_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_set_minRegion_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_set_minRegion_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_get_sigma_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_get_sigma_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_get_sigma_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_get_k_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_get_k_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_get_k_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_get_minRegion_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_get_minRegion_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_get_minRegion_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_get_num_components_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_get_num_components_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_get_num_components_helper::s_help);
        }
        if (functionName == SegmentationModuleInterface_get_component_around_helper::s_tag) {
            helpString.emplace_back(SegmentationModuleInterface_get_component_around_helper::s_prototype);
            helpString.emplace_back(SegmentationModuleInterface_get_component_around_helper::s_help);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool SegmentationModuleInterface::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 3;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == SegmentationModuleInterface_set_sigma_helper::s_tag) {
            SegmentationModuleInterface_set_sigma_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_set_k_helper::s_tag) {
            SegmentationModuleInterface_set_k_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_set_minRegion_helper::s_tag) {
            SegmentationModuleInterface_set_minRegion_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_get_sigma_helper::s_tag) {
            SegmentationModuleInterface_get_sigma_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_get_k_helper::s_tag) {
            SegmentationModuleInterface_get_k_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_get_minRegion_helper::s_tag) {
            SegmentationModuleInterface_get_minRegion_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_get_num_components_helper::s_tag) {
            SegmentationModuleInterface_get_num_components_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModuleInterface_get_component_around_helper::s_tag) {
            SegmentationModuleInterface_get_component_around_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}

} // namespace yarp::sig
