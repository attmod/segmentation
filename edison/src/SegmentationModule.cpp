/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <SegmentationModule.h>

#include <yarp/os/idl/WireTypes.h>

class SegmentationModule_set_sigmaS_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_sigmaS_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_sigmaS_helper::SegmentationModule_set_sigmaS_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_sigmaS_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_sigmaS", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_sigmaR_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_sigmaR_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_sigmaR_helper::SegmentationModule_set_sigmaR_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_sigmaR_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_sigmaR", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_minRegion_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_minRegion_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_minRegion_helper::SegmentationModule_set_minRegion_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_minRegion", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_gradWindRad_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_gradWindRad_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_gradWindRad_helper::SegmentationModule_set_gradWindRad_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_gradWindRad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_gradWindRad", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_threshold_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_threshold_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_threshold_helper::SegmentationModule_set_threshold_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_threshold_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_threshold", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_mixture_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_mixture_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newValue;
};

SegmentationModule_set_mixture_helper::SegmentationModule_set_mixture_helper(const double newValue) :
        m_newValue{newValue}
{
}

bool SegmentationModule_set_mixture_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_mixture", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_set_speedup_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_set_speedup_helper(const SpeedUpLevelComm newSpeedLevel);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    SpeedUpLevelComm m_newSpeedLevel;
};

SegmentationModule_set_speedup_helper::SegmentationModule_set_speedup_helper(const SpeedUpLevelComm newSpeedLevel) :
        m_newSpeedLevel{newSpeedLevel}
{
}

bool SegmentationModule_set_speedup_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_speedup", 1, 2)) {
        return false;
    }
    if (!writer.writeI32(static_cast<int32_t>(m_newSpeedLevel))) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class SegmentationModule_get_sigmaS_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_sigmaS_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_sigmaS_helper::s_return_helper = {};

SegmentationModule_get_sigmaS_helper::SegmentationModule_get_sigmaS_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_sigmaS_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_sigmaS", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_sigmaR_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_sigmaR_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_sigmaR_helper::s_return_helper = {};

SegmentationModule_get_sigmaR_helper::SegmentationModule_get_sigmaR_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_sigmaR_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_sigmaR", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_minRegion_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_minRegion_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_minRegion_helper::s_return_helper = {};

SegmentationModule_get_minRegion_helper::SegmentationModule_get_minRegion_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_minRegion", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_gradWindRad_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_gradWindRad_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_gradWindRad_helper::s_return_helper = {};

SegmentationModule_get_gradWindRad_helper::SegmentationModule_get_gradWindRad_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_gradWindRad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_gradWindRad", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_threshold_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_threshold_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_threshold_helper::s_return_helper = {};

SegmentationModule_get_threshold_helper::SegmentationModule_get_threshold_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_threshold_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_threshold", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_mixture_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_mixture_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double SegmentationModule_get_mixture_helper::s_return_helper = {};

SegmentationModule_get_mixture_helper::SegmentationModule_get_mixture_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_mixture_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_mixture", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class SegmentationModule_get_speedup_helper :
        public yarp::os::Portable
{
public:
    explicit SegmentationModule_get_speedup_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static SpeedUpLevelComm s_return_helper;
};

thread_local SpeedUpLevelComm SegmentationModule_get_speedup_helper::s_return_helper = {};

SegmentationModule_get_speedup_helper::SegmentationModule_get_speedup_helper()
{
    s_return_helper = {};
}

bool SegmentationModule_get_speedup_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_speedup", 1, 2)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    int32_t ecast0;
    SpeedUpLevelCommVocab cvrt1;
    if (!reader.readEnum(ecast0, cvrt1)) {
        reader.fail();
        return false;
    } else {
        s_return_helper = static_cast<SpeedUpLevelComm>(ecast0);
    }
    return true;
}

// Constructor
SegmentationModule::SegmentationModule()
{
    yarp().setOwner(*this);
}

void SegmentationModule::set_sigmaS(const double newValue)
{
    SegmentationModule_set_sigmaS_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_sigmaS(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_sigmaR(const double newValue)
{
    SegmentationModule_set_sigmaR_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_sigmaR(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_minRegion(const double newValue)
{
    SegmentationModule_set_minRegion_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_minRegion(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_gradWindRad(const double newValue)
{
    SegmentationModule_set_gradWindRad_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_gradWindRad(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_threshold(const double newValue)
{
    SegmentationModule_set_threshold_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_threshold(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_mixture(const double newValue)
{
    SegmentationModule_set_mixture_helper helper{newValue};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_mixture(const double newValue)");
    }
    yarp().write(helper, helper);
}

void SegmentationModule::set_speedup(const SpeedUpLevelComm newSpeedLevel)
{
    SegmentationModule_set_speedup_helper helper{newSpeedLevel};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void SegmentationModule::set_speedup(const SpeedUpLevelComm newSpeedLevel)");
    }
    yarp().write(helper, helper);
}

double SegmentationModule::get_sigmaS()
{
    SegmentationModule_get_sigmaS_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_sigmaS()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_sigmaS_helper::s_return_helper : double{};
}

double SegmentationModule::get_sigmaR()
{
    SegmentationModule_get_sigmaR_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_sigmaR()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_sigmaR_helper::s_return_helper : double{};
}

double SegmentationModule::get_minRegion()
{
    SegmentationModule_get_minRegion_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_minRegion()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_minRegion_helper::s_return_helper : double{};
}

double SegmentationModule::get_gradWindRad()
{
    SegmentationModule_get_gradWindRad_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_gradWindRad()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_gradWindRad_helper::s_return_helper : double{};
}

double SegmentationModule::get_threshold()
{
    SegmentationModule_get_threshold_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_threshold()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_threshold_helper::s_return_helper : double{};
}

double SegmentationModule::get_mixture()
{
    SegmentationModule_get_mixture_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double SegmentationModule::get_mixture()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_mixture_helper::s_return_helper : double{};
}

SpeedUpLevelComm SegmentationModule::get_speedup()
{
    SegmentationModule_get_speedup_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "SpeedUpLevelComm SegmentationModule::get_speedup()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? SegmentationModule_get_speedup_helper::s_return_helper : SpeedUpLevelComm{};
}

// help method
std::vector<std::string> SegmentationModule::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("set_sigmaS");
        helpString.emplace_back("set_sigmaR");
        helpString.emplace_back("set_minRegion");
        helpString.emplace_back("set_gradWindRad");
        helpString.emplace_back("set_threshold");
        helpString.emplace_back("set_mixture");
        helpString.emplace_back("set_speedup");
        helpString.emplace_back("get_sigmaS");
        helpString.emplace_back("get_sigmaR");
        helpString.emplace_back("get_minRegion");
        helpString.emplace_back("get_gradWindRad");
        helpString.emplace_back("get_threshold");
        helpString.emplace_back("get_mixture");
        helpString.emplace_back("get_speedup");
        helpString.emplace_back("help");
    } else {
        if (functionName == "set_sigmaS") {
            helpString.emplace_back("void set_sigmaS(const double newValue) ");
        }
        if (functionName == "set_sigmaR") {
            helpString.emplace_back("void set_sigmaR(const double newValue) ");
        }
        if (functionName == "set_minRegion") {
            helpString.emplace_back("void set_minRegion(const double newValue) ");
        }
        if (functionName == "set_gradWindRad") {
            helpString.emplace_back("void set_gradWindRad(const double newValue) ");
        }
        if (functionName == "set_threshold") {
            helpString.emplace_back("void set_threshold(const double newValue) ");
        }
        if (functionName == "set_mixture") {
            helpString.emplace_back("void set_mixture(const double newValue) ");
        }
        if (functionName == "set_speedup") {
            helpString.emplace_back("void set_speedup(const SpeedUpLevelComm newSpeedLevel) ");
        }
        if (functionName == "get_sigmaS") {
            helpString.emplace_back("double get_sigmaS() ");
        }
        if (functionName == "get_sigmaR") {
            helpString.emplace_back("double get_sigmaR() ");
        }
        if (functionName == "get_minRegion") {
            helpString.emplace_back("double get_minRegion() ");
        }
        if (functionName == "get_gradWindRad") {
            helpString.emplace_back("double get_gradWindRad() ");
        }
        if (functionName == "get_threshold") {
            helpString.emplace_back("double get_threshold() ");
        }
        if (functionName == "get_mixture") {
            helpString.emplace_back("double get_mixture() ");
        }
        if (functionName == "get_speedup") {
            helpString.emplace_back("SpeedUpLevelComm get_speedup() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool SegmentationModule::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "set_sigmaS") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_sigmaS(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_sigmaR") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_sigmaR(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_minRegion") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_minRegion(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_gradWindRad") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_gradWindRad(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_threshold") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_threshold(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_mixture") {
            double newValue;
            if (!reader.readFloat64(newValue)) {
                reader.fail();
                return false;
            }
            set_mixture(newValue);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_speedup") {
            SpeedUpLevelComm newSpeedLevel;
            int32_t ecast2;
            SpeedUpLevelCommVocab cvrt3;
            if (!reader.readEnum(ecast2, cvrt3)) {
                reader.fail();
                return false;
            } else {
                newSpeedLevel = static_cast<SpeedUpLevelComm>(ecast2);
            }
            set_speedup(newSpeedLevel);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_sigmaS") {
            SegmentationModule_get_sigmaS_helper::s_return_helper = get_sigmaS();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_sigmaS_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_sigmaR") {
            SegmentationModule_get_sigmaR_helper::s_return_helper = get_sigmaR();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_sigmaR_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_minRegion") {
            SegmentationModule_get_minRegion_helper::s_return_helper = get_minRegion();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_minRegion_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_gradWindRad") {
            SegmentationModule_get_gradWindRad_helper::s_return_helper = get_gradWindRad();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_gradWindRad_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_threshold") {
            SegmentationModule_get_threshold_helper::s_return_helper = get_threshold();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_threshold_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_mixture") {
            SegmentationModule_get_mixture_helper::s_return_helper = get_mixture();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(SegmentationModule_get_mixture_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_speedup") {
            SegmentationModule_get_speedup_helper::s_return_helper = get_speedup();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(static_cast<int32_t>(SegmentationModule_get_speedup_helper::s_return_helper))) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
