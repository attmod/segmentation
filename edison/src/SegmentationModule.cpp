/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <SegmentationModule.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

// set_sigmaS helper class declaration
class SegmentationModule_set_sigmaS_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_sigmaS_helper() = default;
    explicit SegmentationModule_set_sigmaS_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_sigmaS"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_sigmaS(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_sigmaR helper class declaration
class SegmentationModule_set_sigmaR_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_sigmaR_helper() = default;
    explicit SegmentationModule_set_sigmaR_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_sigmaR"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_sigmaR(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_minRegion helper class declaration
class SegmentationModule_set_minRegion_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_minRegion_helper() = default;
    explicit SegmentationModule_set_minRegion_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_minRegion"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_minRegion(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_gradWindRad helper class declaration
class SegmentationModule_set_gradWindRad_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_gradWindRad_helper() = default;
    explicit SegmentationModule_set_gradWindRad_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_gradWindRad"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_gradWindRad(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_threshold helper class declaration
class SegmentationModule_set_threshold_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_threshold_helper() = default;
    explicit SegmentationModule_set_threshold_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_threshold"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_threshold(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_mixture helper class declaration
class SegmentationModule_set_mixture_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_mixture_helper() = default;
    explicit SegmentationModule_set_mixture_helper(const double newValue);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double newValue);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double newValue{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const double);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_mixture"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_mixture(const double newValue)"};
    static constexpr const char* s_help{""};
};

// set_speedup helper class declaration
class SegmentationModule_set_speedup_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_set_speedup_helper() = default;
    explicit SegmentationModule_set_speedup_helper(const SpeedUpLevelComm newSpeedLevel);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const SpeedUpLevelComm newSpeedLevel);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        SpeedUpLevelComm newSpeedLevel{NO_SPEEDUP_COMM};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;
    };

    using funcptr_t = void (*)(const SpeedUpLevelComm);
    void call(SegmentationModule* ptr) const;

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_speedup"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{0};
    static constexpr const char* s_prototype{"void SegmentationModule::set_speedup(const SpeedUpLevelComm newSpeedLevel)"};
    static constexpr const char* s_help{""};
};

// get_sigmaS helper class declaration
class SegmentationModule_get_sigmaS_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_sigmaS_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_sigmaS"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_sigmaS()"};
    static constexpr const char* s_help{""};
};

// get_sigmaR helper class declaration
class SegmentationModule_get_sigmaR_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_sigmaR_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_sigmaR"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_sigmaR()"};
    static constexpr const char* s_help{""};
};

// get_minRegion helper class declaration
class SegmentationModule_get_minRegion_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_minRegion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_minRegion"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_minRegion()"};
    static constexpr const char* s_help{""};
};

// get_gradWindRad helper class declaration
class SegmentationModule_get_gradWindRad_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_gradWindRad_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_gradWindRad"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_gradWindRad()"};
    static constexpr const char* s_help{""};
};

// get_threshold helper class declaration
class SegmentationModule_get_threshold_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_threshold_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_threshold"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_threshold()"};
    static constexpr const char* s_help{""};
};

// get_mixture helper class declaration
class SegmentationModule_get_mixture_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_mixture_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_mixture"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double SegmentationModule::get_mixture()"};
    static constexpr const char* s_help{""};
};

// get_speedup helper class declaration
class SegmentationModule_get_speedup_helper :
        public yarp::os::Portable
{
public:
    SegmentationModule_get_speedup_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        SpeedUpLevelComm return_helper{NO_SPEEDUP_COMM};
    };

    using funcptr_t = SpeedUpLevelComm (*)();
    void call(SegmentationModule* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_speedup"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"SpeedUpLevelComm SegmentationModule::get_speedup()"};
    static constexpr const char* s_help{""};
};

// set_sigmaS helper class implementation
SegmentationModule_set_sigmaS_helper::SegmentationModule_set_sigmaS_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_sigmaS_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_sigmaS_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_sigmaS_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_sigmaS_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_sigmaS_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_sigmaS_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_sigmaS_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_sigmaS_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_sigmaS_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_sigmaS_helper::call(SegmentationModule* ptr) const
{
    ptr->set_sigmaS(cmd.newValue);
}

// set_sigmaR helper class implementation
SegmentationModule_set_sigmaR_helper::SegmentationModule_set_sigmaR_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_sigmaR_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_sigmaR_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_sigmaR_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_sigmaR_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_sigmaR_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_sigmaR_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_sigmaR_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_sigmaR_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_sigmaR_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_sigmaR_helper::call(SegmentationModule* ptr) const
{
    ptr->set_sigmaR(cmd.newValue);
}

// set_minRegion helper class implementation
SegmentationModule_set_minRegion_helper::SegmentationModule_set_minRegion_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_minRegion_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_minRegion_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_minRegion_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_minRegion_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_minRegion_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_minRegion_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_minRegion_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_minRegion_helper::call(SegmentationModule* ptr) const
{
    ptr->set_minRegion(cmd.newValue);
}

// set_gradWindRad helper class implementation
SegmentationModule_set_gradWindRad_helper::SegmentationModule_set_gradWindRad_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_gradWindRad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_gradWindRad_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_gradWindRad_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_gradWindRad_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_gradWindRad_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_gradWindRad_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_gradWindRad_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_gradWindRad_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_gradWindRad_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_gradWindRad_helper::call(SegmentationModule* ptr) const
{
    ptr->set_gradWindRad(cmd.newValue);
}

// set_threshold helper class implementation
SegmentationModule_set_threshold_helper::SegmentationModule_set_threshold_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_threshold_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_threshold_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_threshold_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_threshold_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_threshold_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_threshold_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_threshold_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_threshold_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_threshold_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_threshold_helper::call(SegmentationModule* ptr) const
{
    ptr->set_threshold(cmd.newValue);
}

// set_mixture helper class implementation
SegmentationModule_set_mixture_helper::SegmentationModule_set_mixture_helper(const double newValue) :
        cmd{newValue}
{
}

bool SegmentationModule_set_mixture_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_mixture_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_mixture_helper::Command::Command(const double newValue) :
        newValue{newValue}
{
}

bool SegmentationModule_set_mixture_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_mixture_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_mixture_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(newValue)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(newValue)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_mixture_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_mixture_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_mixture_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_mixture_helper::call(SegmentationModule* ptr) const
{
    ptr->set_mixture(cmd.newValue);
}

// set_speedup helper class implementation
SegmentationModule_set_speedup_helper::SegmentationModule_set_speedup_helper(const SpeedUpLevelComm newSpeedLevel) :
        cmd{newSpeedLevel}
{
}

bool SegmentationModule_set_speedup_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_set_speedup_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

SegmentationModule_set_speedup_helper::Command::Command(const SpeedUpLevelComm newSpeedLevel) :
        newSpeedLevel{newSpeedLevel}
{
}

bool SegmentationModule_set_speedup_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_set_speedup_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_set_speedup_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(newSpeedLevel))) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readEnum<int32_t, SpeedUpLevelCommConverter>(_ecast)) {
        reader.fail();
        return false;
    }
    newSpeedLevel = static_cast<SpeedUpLevelComm>(_ecast);
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_set_speedup_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_set_speedup_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_set_speedup_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

void SegmentationModule_set_speedup_helper::call(SegmentationModule* ptr) const
{
    ptr->set_speedup(cmd.newSpeedLevel);
}

// get_sigmaS helper class implementation
bool SegmentationModule_get_sigmaS_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_sigmaS_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_sigmaS_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_sigmaS_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_sigmaS_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_sigmaS_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_sigmaS_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_sigmaS_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_sigmaS_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_sigmaS();
}

// get_sigmaR helper class implementation
bool SegmentationModule_get_sigmaR_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_sigmaR_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_sigmaR_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_sigmaR_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_sigmaR_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_sigmaR_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_sigmaR_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_sigmaR_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_sigmaR_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_sigmaR();
}

// get_minRegion helper class implementation
bool SegmentationModule_get_minRegion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_minRegion_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_minRegion_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_minRegion_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_minRegion_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_minRegion_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_minRegion_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_minRegion_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_minRegion_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_minRegion_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_minRegion();
}

// get_gradWindRad helper class implementation
bool SegmentationModule_get_gradWindRad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_gradWindRad_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_gradWindRad_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_gradWindRad_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_gradWindRad_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_gradWindRad_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_gradWindRad_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_gradWindRad_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_gradWindRad_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_gradWindRad();
}

// get_threshold helper class implementation
bool SegmentationModule_get_threshold_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_threshold_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_threshold_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_threshold_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_threshold_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_threshold_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_threshold_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_threshold_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_threshold_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_threshold_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_threshold();
}

// get_mixture helper class implementation
bool SegmentationModule_get_mixture_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_mixture_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_mixture_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_mixture_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_mixture_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_mixture_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_mixture_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_mixture_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeFloat64(return_helper)) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_mixture_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void SegmentationModule_get_mixture_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_mixture();
}

// get_speedup helper class implementation
bool SegmentationModule_get_speedup_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool SegmentationModule_get_speedup_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool SegmentationModule_get_speedup_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool SegmentationModule_get_speedup_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool SegmentationModule_get_speedup_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool SegmentationModule_get_speedup_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool SegmentationModule_get_speedup_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool SegmentationModule_get_speedup_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeI32(static_cast<int32_t>(return_helper))) {
            return false;
        }
    }
    return true;
}

bool SegmentationModule_get_speedup_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readEnum<int32_t, SpeedUpLevelCommConverter>(_ecast)) {
        reader.fail();
        return false;
    }
    return_helper = static_cast<SpeedUpLevelComm>(_ecast);
    return true;
}

void SegmentationModule_get_speedup_helper::call(SegmentationModule* ptr)
{
    reply.return_helper = ptr->get_speedup();
}

// Constructor
SegmentationModule::SegmentationModule()
{
    yarp().setOwner(*this);
}

void SegmentationModule::set_sigmaS(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_sigmaS_helper::s_prototype);
    }
    SegmentationModule_set_sigmaS_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_sigmaR(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_sigmaR_helper::s_prototype);
    }
    SegmentationModule_set_sigmaR_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_minRegion(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_minRegion_helper::s_prototype);
    }
    SegmentationModule_set_minRegion_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_gradWindRad(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_gradWindRad_helper::s_prototype);
    }
    SegmentationModule_set_gradWindRad_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_threshold(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_threshold_helper::s_prototype);
    }
    SegmentationModule_set_threshold_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_mixture(const double newValue)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_mixture_helper::s_prototype);
    }
    SegmentationModule_set_mixture_helper helper{newValue};
    yarp().write(helper, helper);
}

void SegmentationModule::set_speedup(const SpeedUpLevelComm newSpeedLevel)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_set_speedup_helper::s_prototype);
    }
    SegmentationModule_set_speedup_helper helper{newSpeedLevel};
    yarp().write(helper, helper);
}

double SegmentationModule::get_sigmaS()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_sigmaS_helper::s_prototype);
    }
    SegmentationModule_get_sigmaS_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModule::get_sigmaR()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_sigmaR_helper::s_prototype);
    }
    SegmentationModule_get_sigmaR_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModule::get_minRegion()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_minRegion_helper::s_prototype);
    }
    SegmentationModule_get_minRegion_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModule::get_gradWindRad()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_gradWindRad_helper::s_prototype);
    }
    SegmentationModule_get_gradWindRad_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModule::get_threshold()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_threshold_helper::s_prototype);
    }
    SegmentationModule_get_threshold_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

double SegmentationModule::get_mixture()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_mixture_helper::s_prototype);
    }
    SegmentationModule_get_mixture_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

SpeedUpLevelComm SegmentationModule::get_speedup()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", SegmentationModule_get_speedup_helper::s_prototype);
    }
    SegmentationModule_get_speedup_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : SpeedUpLevelComm{};
}

// help method
std::vector<std::string> SegmentationModule::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(SegmentationModule_set_sigmaS_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_sigmaR_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_minRegion_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_gradWindRad_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_threshold_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_mixture_helper::s_tag);
        helpString.emplace_back(SegmentationModule_set_speedup_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_sigmaS_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_sigmaR_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_minRegion_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_gradWindRad_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_threshold_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_mixture_helper::s_tag);
        helpString.emplace_back(SegmentationModule_get_speedup_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == SegmentationModule_set_sigmaS_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_sigmaS_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_sigmaR_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_sigmaR_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_minRegion_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_minRegion_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_gradWindRad_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_gradWindRad_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_threshold_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_threshold_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_mixture_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_mixture_helper::s_prototype);
        }
        if (functionName == SegmentationModule_set_speedup_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_set_speedup_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_sigmaS_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_sigmaS_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_sigmaR_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_sigmaR_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_minRegion_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_minRegion_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_gradWindRad_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_gradWindRad_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_threshold_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_threshold_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_mixture_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_mixture_helper::s_prototype);
        }
        if (functionName == SegmentationModule_get_speedup_helper::s_tag) {
            helpString.emplace_back(SegmentationModule_get_speedup_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool SegmentationModule::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 2;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == SegmentationModule_set_sigmaS_helper::s_tag) {
            SegmentationModule_set_sigmaS_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_sigmaR_helper::s_tag) {
            SegmentationModule_set_sigmaR_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_minRegion_helper::s_tag) {
            SegmentationModule_set_minRegion_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_gradWindRad_helper::s_tag) {
            SegmentationModule_set_gradWindRad_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_threshold_helper::s_tag) {
            SegmentationModule_set_threshold_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_mixture_helper::s_tag) {
            SegmentationModule_set_mixture_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_set_speedup_helper::s_tag) {
            SegmentationModule_set_speedup_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_sigmaS_helper::s_tag) {
            SegmentationModule_get_sigmaS_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_sigmaR_helper::s_tag) {
            SegmentationModule_get_sigmaR_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_minRegion_helper::s_tag) {
            SegmentationModule_get_minRegion_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_gradWindRad_helper::s_tag) {
            SegmentationModule_get_gradWindRad_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_threshold_helper::s_tag) {
            SegmentationModule_get_threshold_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_mixture_helper::s_tag) {
            SegmentationModule_get_mixture_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == SegmentationModule_get_speedup_helper::s_tag) {
            SegmentationModule_get_speedup_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
